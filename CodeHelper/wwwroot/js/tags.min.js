let DEFAULTS = { items: [], allowNew: !1, showAllSuggestions: !1, badgeStyle: "primary", allowClear: !1, clearEnd: !1, selected: [], regex: "", separator: [], max: 5, clearLabel: "Clear", searchLabel: "Type a value", showDropIcon: !0, keepOpen: !1, allowSame: !1, baseClass: "", placeholder: "", addOnBlur: !1, showDisabled: !1, hideNativeValidation: !1, suggestionsThreshold: -1, maximumItems: 6, autoselectFirst: !0, updateOnSelect: !1, highlightTyped: !1, highlightClass: "", fullWidth: !0, fixed: !1, fuzzy: !1, startsWith: !1, singleBadge: !1, activeClasses: ["main-bg-color", "text-white"], labelField: "label", valueField: "value", searchFields: ["label"], queryParam: "query", server: "", serverMethod: "GET", serverParams: {}, serverDataKey: "data", fetchOptions: {}, liveServer: !1, noCache: !0, debounceTime: 300, notFoundMessage: "", onRenderItem: (e, t, i) => t, onSelectItem(e, t) { }, onClearItem(e, t) { }, onCreateItem(e, t) { }, onBlur(e, t) { }, onFocus(e, t) { }, onCanAdd(e, t, i) { }, confirmClear: (e, t) => Promise.resolve(), confirmAdd: (e, t) => Promise.resolve(), onServerResponse: (e, t) => e.json() }, CLASS_PREFIX = "tags-", LOADING_CLASS = "is-loading", ACTIVE_CLASS = "is-active", INVALID_CLASS = "is-invalid", MAX_REACHED_CLASS = "is-max-reached", SHOW_CLASS = "show", VALUE_ATTRIBUTE = "data-value", NEXT = "next", PREV = "prev", FOCUS_CLASS = "form-control-focus", PLACEHOLDER_CLASS = "form-placeholder-shown", DISABLED_CLASS = "form-control-disabled", INSTANCE_MAP = new WeakMap, counter = 0, tooltip = window.bootstrap && window.bootstrap.Tooltip; function debounce(e, t = 300) { let i; return (...s) => { clearTimeout(i), i = setTimeout(() => { e.apply(this, s) }, t) } } function calcTextWidth(e, t = null) { let i = ce("span"); document.body.appendChild(i), i.style.fontSize = t || "inherit", i.style.height = "auto", i.style.width = "auto", i.style.position = "absolute", i.style.whiteSpace = "no-wrap", i.innerHTML = e; let s = Math.ceil(i.clientWidth); return document.body.removeChild(i), s } function removeDiacritics(e) { return e.normalize("NFD").replace(/[\u0300-\u036f]/g, "") } function normalize(e) { return e ? removeDiacritics(e.toString()).toLowerCase() : "" } function fuzzyMatch(e, t) { if (e.indexOf(t) >= 0) return !0; let i = 0; for (let s = 0; s < t.length; s++) { let l = t[s]; if (" " != l && (i = e.indexOf(l, i) + 1) <= 0) return !1 } return !0 } function hideItem(e) { e.style.display = "none", attrs(e, { "aria-hidden": "true" }) } function showItem(e) { e.style.display = "list-item", attrs(e, { "aria-hidden": "false" }) } function attrs(e, t) { for (let [i, s] of Object.entries(t)) e.setAttribute(i, s) } function rmAttr(e, t) { e.hasAttribute(t) && e.removeAttribute(t) } function parseBool(e) { return ["true", "false", "1", "0", !0, !1].includes(e) && !!JSON.parse(e) } function ce(e) { return document.createElement(e) } function splitMulti(e, t) { let i = t[0]; for (let s = 1; s < t.length; s++)e = e.split(t[s]).join(i); return e.split(i) } class Tags { constructor(e, t = {}) { if (!(e instanceof HTMLElement)) { console.error("Invalid element", e); return } INSTANCE_MAP.set(e, this), counter++, this._selectElement = e, this._configure(t), this._keyboardNavigation = !1, this._searchFunc = debounce(() => { this._loadFromServer(!0) }, this._config.debounceTime), this._fireEvents = !0, this._configureParent(), this._holderElement = ce("div"), this._containerElement = ce("div"), this._dropElement = ce("ul"), this._searchInput = ce("input"), this._holderElement.appendChild(this._containerElement), this._selectElement.parentElement.insertBefore(this._holderElement, this._selectElement), this._configureHolderElement(), this._configureContainerElement(), this._configureSelectElement(), this._configureSearchInput(), this._configureDropElement(), this.resetState(), this.handleEvent = e => { this._handleEvent(e) }, this._config.fixed && (document.addEventListener("scroll", this, !0), window.addEventListener("resize", this)), ["focus", "blur", "input", "keydown", "paste"].forEach(e => { this._searchInput.addEventListener(e, this) }), ["mousemove", "mouseleave"].forEach(e => { this._dropElement.addEventListener(e, this) }), this.loadData(!0) } static init(e = "select[multiple]", t = {}) { let i = document.querySelectorAll(e); for (let s = 0; s < i.length; s++)!Tags.getInstance(i[s]) && new Tags(i[s], t) } static getInstance(e) { if (INSTANCE_MAP.has(e)) return INSTANCE_MAP.get(e) } dispose() { ["focus", "blur", "input", "keydown", "paste"].forEach(e => { this._searchInput.removeEventListener(e, this) }), ["mousemove", "mouseleave"].forEach(e => { this._dropElement.removeEventListener(e, this) }), this._config.fixed && (document.removeEventListener("scroll", this, !0), window.removeEventListener("resize", this)), this._selectElement.style.display = "block", this._holderElement.parentElement.removeChild(this._holderElement), this.parentForm && this.parentForm.removeEventListener("reset", this), INSTANCE_MAP.delete(this._selectElement) } handleEvent(e) { this._handleEvent(e) } _handleEvent(e) { ["scroll", "resize"].includes(e.type) ? (this._timer && window.cancelAnimationFrame(this._timer), this._timer = window.requestAnimationFrame(() => { this[`on${e.type}`](e) })) : this[`on${e.type}`](e) } _configure(e = {}) { this._config = Object.assign({}, DEFAULTS, { showDropIcon: !!this._findOption() }); let t = this._selectElement.dataset.config ? JSON.parse(this._selectElement.dataset.config) : {}, i = { ...e, ...t, ...this._selectElement.dataset }; for (let [s, l] of Object.entries(DEFAULTS)) { if ("config" == s || void 0 === i[s]) continue; let n = i[s]; switch (typeof l) { case "number": this._config[s] = parseInt(n); break; case "boolean": this._config[s] = parseBool(n); break; case "string": this._config[s] = n.toString(); break; case "object": this._config[s] = n, "string" == typeof n && (["{", "["].includes(n[0]) ? this._config[s] = JSON.parse(n) : this._config[s] = n.split(n.includes("|") ? "|" : ",")); break; case "function": this._config[s] = "string" == typeof n ? n.split(".").reduce((e, t) => e[t], window) : n, this._config[s] || console.error("Invalid function", n); break; default: this._config[s] = n } } this._config.placeholder || (this._config.placeholder = this._getPlaceholder()), -1 == this._config.suggestionsThreshold && (this._config.suggestionsThreshold = this._config.liveServer ? 1 : 0) } config(e = null) { return e ? this._config[e] : this._config } setConfig(e, t) { this._config[e] = t } _configureParent() { for (this.overflowParent = null, this.parentForm = this._selectElement.parentElement; this.parentForm && ("hidden" === this.parentForm.style.overflow && (this.overflowParent = this.parentForm), this.parentForm = this.parentForm.parentElement, !this.parentForm || "FORM" != this.parentForm.nodeName);); this.parentForm && this.parentForm.addEventListener("reset", this) } _getPlaceholder() { if (this._selectElement.hasAttribute("placeholder")) return this._selectElement.getAttribute("placeholder"); if (this._selectElement.dataset.placeholder) return this._selectElement.dataset.placeholder; let e = this._selectElement.querySelector("option"); return e && this._config.autoselectFirst ? (rmAttr(e, "selected"), e.selected = !1, e.value ? "" : e.textContent) : "" } _configureSelectElement() { let e = this._selectElement; this._config.hideNativeValidation ? (e.style.position = "absolute", e.style.left = "-9999px") : e.style.cssText = "height:1px;width:1px;opacity:0;padding:0;margin:0;border:0;float:left;flex-basis:100%;min-height:unset;", e.tabIndex = -1, e.addEventListener("focus", e => { this.onclick(e) }), e.addEventListener("invalid", e => { this._holderElement.classList.add(INVALID_CLASS) }) } _configureDropElement() { let e = this._dropElement; e.classList.add(...["dropdown-menu", CLASS_PREFIX + "menu"]), e.id = CLASS_PREFIX + "menu-" + counter, e.setAttribute("role", "menu"); let t = e.style; t.padding = "0", t.maxHeight = "280px", this._config.fullWidth || (t.maxWidth = "360px"), this._config.fixed && (t.position = "fixed"), t.overflowY = "auto", t.overscrollBehavior = "contain", t.textAlign = "unset", e.addEventListener("mouseenter", e => { this._keyboardNavigation = !1 }), this._holderElement.appendChild(e), this._searchInput.setAttribute("aria-controls", e.id) } _configureHolderElement() { let e = this._holderElement; e.classList.add(...["form-control", "dropdown"]), ["form-select-lg", "form-select-sm", "is-invalid", "is-valid"].forEach(t => { this._selectElement.classList.contains(t) && e.classList.add(t) }), 0 == this._config.suggestionsThreshold && this._config.showDropIcon && e.classList.add("form-select"), this.overflowParent && (e.style.position = "inherit"), e.style.height = "auto", e.addEventListener("click", this) } _configureContainerElement() { this._containerElement.addEventListener("click", e => { !this.isDisabled() && "hidden" != this._searchInput.style.visibility && this._searchInput.focus() }); let e = this._containerElement.style; e.display = "flex", e.alignItems = "center", e.flexWrap = "wrap" } _configureSearchInput() { let e = this._searchInput; e.type = "text", e.autocomplete = "off", e.spellcheck = !1, attrs(e, { "aria-autocomplete": "list", "aria-haspopup": "menu", "aria-expanded": "false", "aria-label": this._config.searchLabel, role: "combobox" }), e.style.cssText = "background-color:transparent;color:currentColor;border:0;padding:0;outline:0;max-width:100%", this.resetSearchInput(!0), this._containerElement.appendChild(e), this._rtl = "rtl" === window.getComputedStyle(e).direction } onfocus(e) { this._holderElement.classList.add(FOCUS_CLASS), this.showOrSearch(), this._config.onFocus(e, this) } onblur(e) { this._abortController && this._abortController.abort(); let t = !0; if (this._config.addOnBlur && this._searchInput.value && (t = this._enterValue()), this._holderElement.classList.remove(FOCUS_CLASS), this.hideSuggestions(t), this._fireEvents) { let i = this.getSelection(), s = { selection: i ? i.dataset.value : null, input: this._searchInput.value }; this._config.onBlur(e, this), this._selectElement.dispatchEvent(new CustomEvent("tags.blur", { bubbles: !0, detail: s })) } } onpaste(e) { let t = e.clipboardData || window.clipboardData, i = t.getData("text/plain").replace(/\r\n|\n/g, " "); if (i.length > 2 && this._config.separator.length) { let s = splitMulti(i, this._config.separator).filter(e => e); s.length > 1 && (e.preventDefault(), s.forEach(e => { this._addPastedValue(e) })) } } _addPastedValue(e) { let t = e, i = {}; if (this._config.allowNew) i.new = 1; else { let s = this.getSelection(); if (!s) return; e = s.getAttribute(VALUE_ATTRIBUTE), t = s.dataset.label } this._config.confirmAdd(e, this).then(() => { this._add(t, e, i) }).catch(() => { }) } oninput(e) { let t = this._searchInput.value; if (t) { let i = t.slice(-1); if (this._config.separator.length && this._config.separator.includes(i)) { this._searchInput.value = this._searchInput.value.slice(0, -1); let s = this._searchInput.value; this._addPastedValue(s); return } } setTimeout(() => { this._adjustWidth() }), this.showOrSearch() } onkeydown(e) { let t = e.keyCode || e.key, i = e.target; switch (229 == e.keyCode && (t = i.value.charAt(i.selectionStart - 1).charCodeAt(0)), t) { case 13: case "Enter": e.preventDefault(), this._enterValue(); break; case 38: case "ArrowUp": e.preventDefault(), this._keyboardNavigation = !0, this._moveSelection(PREV); break; case 40: case "ArrowDown": e.preventDefault(), this._keyboardNavigation = !0, this.isDropdownVisible() ? this._moveSelection(NEXT) : this.showOrSearch(!1); break; case 8: case "Backspace": let s = this.getLastItem(); 0 == this._searchInput.value.length && s && this._config.confirmClear(s, this).then(() => { this.removeLastItem(), this._adjustWidth(), this.showOrSearch() }).catch(() => { }); break; case 27: case "Escape": this._searchInput.focus(), this.hideSuggestions() } } onmousemove(e) { this._keyboardNavigation = !1 } onmouseleave(e) { this.removeSelection() } onscroll(e) { this._positionMenu() } onresize(e) { this._positionMenu() } onclick(e = null) { e && e.preventDefault(), !(!this.isSingle() && this.isMaxReached()) && this._searchInput.focus() } onreset(e) { this.reset() } loadData(e = !1) { Object.keys(this._config.items).length > 0 ? this.setData(this._config.items, !0) : this.resetSuggestions(!0), this._config.server && (this._config.liveServer || this._loadFromServer(!e)) } _setSelectedAttributes() { let e = this._selectElement.selectedOptions || []; for (let t = 0; t < e.length; t++)e[t].value && !e[t].hasAttribute("selected") && e[t].setAttribute("selected", "selected") } resetState() { this.isDisabled() ? (this._holderElement.setAttribute("readonly", ""), this._searchInput.setAttribute("disabled", ""), this._holderElement.classList.add(DISABLED_CLASS)) : (rmAttr(this._holderElement, "readonly"), rmAttr(this._searchInput, "disabled"), this._holderElement.classList.remove(DISABLED_CLASS)) } resetSuggestions(e = !1) { this._setSelectedAttributes(); let t = e => ({ value: e.getAttribute("value"), label: e.textContent, disabled: e.disabled, selected: e.selected, data: Object.assign({ disabled: e.disabled }, e.dataset) }), i = Array.from(this._selectElement.children).filter(e => e.hasAttribute("label") || !e.disabled || this._config.showDisabled).map(e => e.hasAttribute("label") ? { group: e.getAttribute("label"), items: Array.from(e.children).map(e => t(e)) } : t(e)); this.setData(i, e) } _enterValue() { let e = this.getSelection(); if (e) return e.click(), !0; if (this._config.allowNew && this._searchInput.value) { let t = this._searchInput.value; return this._config.confirmAdd(t, this).then(() => { this._add(t, t, { new: 1 }) }).catch(() => { }), !0 } return !1 } _loadFromServer(e = !1) { this._abortController && this._abortController.abort(), this._abortController = new AbortController; let t = this._selectElement.dataset.serverParams || {}; "string" == typeof t && (t = JSON.parse(t)); let i = Object.assign({}, this._config.serverParams, t); if (i[this._config.queryParam] = this._searchInput.value, this._config.noCache && (i.t = Date.now()), i.related) { let s = document.getElementById(i.related); if (s) { i.related = s.value; let l = s.getAttribute("name"); l && (i[l] = s.value) } } let n = new URLSearchParams(i), r = this._config.server, a = Object.assign(this._config.fetchOptions, { method: this._config.serverMethod || "GET", signal: this._abortController.signal }); "POST" === a.method ? a.body = n : r += "?" + n.toString(), this._holderElement.classList.add(LOADING_CLASS), fetch(r, a).then(e => this._config.onServerResponse(e, this)).then(t => { let i = t[this._config.serverDataKey] || t; this.setData(i, !e), this._abortController = null, e && this._showSuggestions() }).catch(e => { "AbortError" !== e.name && !this._abortController.signal.aborted && console.error(e) }).finally(e => { this._holderElement.classList.remove(LOADING_CLASS) }) } _add(e, t = null, i = {}) { if (!this.canAdd(e, i)) return null; let s = this.addItem(e, t, i); return this._resetHtmlState(), this._config.keepOpen ? this._showSuggestions() : this.resetSearchInput(), s } _isItemEnabled(e) { if ("none" === e.style.display) return !1; let t = e.firstElementChild; return "A" === t.tagName && !t.classList.contains("disabled") } _moveSelection(e = NEXT, t = null) { let i = this.getSelection(); if (i) { let s = e === NEXT ? "nextSibling" : "previousSibling"; t = i.parentNode; do t = t[s]; while (t && !this._isItemEnabled(t)); t ? i.classList.remove(...this._activeClasses()) : i && (t = i.parentElement) } else { if (e === PREV) return t; if (!t) for (t = this._dropElement.firstChild; t && !this._isItemEnabled(t);)t = t.nextSibling } if (t) { let l = t.offsetHeight, n = t.offsetTop, r = t.parentNode, a = r.offsetHeight, o = r.scrollHeight, h = r.offsetTop; if (0 === l && setTimeout(() => { r.scrollTop = 0 }), e === PREV) r.scrollTop = n - h > 10 ? n - h : 0; else { let c = n + l - (a + r.scrollTop); c > 0 && l > 0 && (r.scrollTop = n + l - a + 1, r.scrollTop + a >= o - 10 && (r.scrollTop = n - h)) } let d = t.querySelector("a"); d.classList.add(...this._activeClasses()), this._searchInput.setAttribute("aria-activedescendant", d.id), this._config.updateOnSelect && (this._searchInput.value = d.dataset.label, this._adjustWidth()) } else this._searchInput.setAttribute("aria-activedescendant", ""); return t } _adjustWidth() { this._holderElement.classList.remove(PLACEHOLDER_CLASS), this._searchInput.value ? this._searchInput.size = this._searchInput.value.length : this.getSelectedValues().length ? (this._searchInput.placeholder = "", this._searchInput.size = 1) : (this._searchInput.size = this._config.placeholder.length > 0 ? this._config.placeholder.length : 1, this._searchInput.placeholder = this._config.placeholder, this._holderElement.classList.add(PLACEHOLDER_CLASS)); let e = this._searchInput.value || this._searchInput.placeholder, t = window.getComputedStyle(this._holderElement).fontSize, i = calcTextWidth(e, t) + 16; this._searchInput.style.width = i + "px" } _buildSuggestions(e) { for (; this._dropElement.lastChild;)this._dropElement.removeChild(this._dropElement.lastChild); let t = 0, i = 1; for (let s = 0; s < e.length; s++) { let l = e[s]; if (l) { if (l.group && l.items) { let n = ce("li"); n.setAttribute("role", "presentation"), n.dataset.id = "" + i; let r = ce("span"); if (n.append(r), r.classList.add(...["dropdown-header", "text-truncate"]), r.innerHTML = l.group, this._dropElement.appendChild(n), l.items) for (let a = 0; a < l.items.length; a++) { let o = l.items[a]; o.group_id = i, this._buildSuggestionsItem(l.items[a], t), t++ } i++ } this._buildSuggestionsItem(l, t), t++ } } if (this._config.notFoundMessage) { let h = ce("li"); h.setAttribute("role", "presentation"), h.classList.add(CLASS_PREFIX + "not-found"), h.innerHTML = '<span class="dropdown-item"></span>', this._dropElement.appendChild(h) } } _buildSuggestionsItem(e, t) { if (!e[this._config.valueField]) return; let i = e[this._config.valueField], s = e[this._config.labelField], l = this._config.onRenderItem(e, s, this), n = ce("li"); n.setAttribute("role", "presentation"), e.group_id && n.setAttribute("data-group-id", "" + e.group_id); let r = ce("a"); n.append(r), r.id = this._dropElement.id + "-" + t, r.classList.add(...["dropdown-item", "text-truncate"]), e.disabled && r.classList.add(...["disabled"]), r.setAttribute(VALUE_ATTRIBUTE, i), r.dataset.label = s, this._config.searchFields.forEach(t => { n.dataset[t] = e[t] }), r.setAttribute("href", "#"), r.innerHTML = l, this._dropElement.appendChild(n), r.addEventListener("mouseenter", e => { !this._keyboardNavigation && (this.removeSelection(), n.querySelector("a").classList.add(...this._activeClasses())) }), r.addEventListener("mousedown", e => { e.preventDefault() }), r.addEventListener("click", t => { t.preventDefault(), t.stopPropagation(), this._config.confirmAdd(i, this).then(() => { this._add(s, i, e.data), this._config.onSelectItem(e, this) }).catch(() => { }) }) } initialOptions() { return this._selectElement.querySelectorAll("option[data-init]") } _removeSelectedAttrs() { this._selectElement.querySelectorAll("option").forEach(e => { rmAttr(e, "selected") }) } reset() { this.removeAll(), this._fireEvents = !1; let e = this.initialOptions(); this._removeSelectedAttrs(); for (let t = 0; t < e.length; t++) { let i = e[t], s = Object.assign({}, { disabled: i.hasAttribute("disabled") }, i.dataset); this.addItem(i.textContent, i.value, s) } this._resetHtmlState(), this._fireEvents = !0 } resetSearchInput(e = !1) { this._searchInput.value = "", this._adjustWidth(), e || (this._shouldShow() || this.hideSuggestions(), this._searchInput === document.activeElement && this._searchInput.dispatchEvent(new Event("input"))), this.isMaxReached() ? (this._holderElement.classList.add(MAX_REACHED_CLASS), this._searchInput.style.visibility = "hidden") : "hidden" == this._searchInput.style.visibility && (this._searchInput.style.visibility = "visible"), this.isSingle() && !e && document.activeElement.blur() } getSelectedValues() { let e = this._selectElement.querySelectorAll("option[selected]"); return Array.from(e).map(e => e.value) } getAvailableValues() { let e = this._selectElement.querySelectorAll("option"); return Array.from(e).map(e => e.value) } showOrSearch(e = !0) { if (e && !this._shouldShow()) { this.hideSuggestions(!1); return } this._config.liveServer ? this._searchFunc() : this._showSuggestions() } hideSuggestions(e = !0) { this._dropElement.classList.remove(SHOW_CLASS), attrs(this._searchInput, { "aria-expanded": "false" }), this.removeSelection(), e && this._holderElement.classList.remove(INVALID_CLASS) } toggleSuggestions(e = !0, t = !0) { this._dropElement.classList.contains(SHOW_CLASS) ? this.hideSuggestions(t) : this.showOrSearch(e) } _shouldShow() { return !(this.isDisabled() || this.isMaxReached()) && this._searchInput.value.length >= this._config.suggestionsThreshold } _showSuggestions() { if (document.activeElement != this._searchInput || "hidden" == this._searchInput.style.visibility) return; let e = normalize(this._searchInput.value), t = {}, i = this._dropElement.querySelectorAll("li"), s = 0, l = null, n = !1, r = {}; for (let a = 0; a < i.length; a++) { let o = i[a], h = o.firstElementChild; if (h instanceof HTMLSpanElement) { o.dataset.id && (r[o.dataset.id] = !1), hideItem(o); continue } if (h.classList.remove(...this._activeClasses()), !this._config.allowSame) { let c = h.getAttribute(VALUE_ATTRIBUTE); t[c] = t[c] || 0; let d = this._findOption(h.getAttribute(VALUE_ATTRIBUTE), "[selected]", t[c]++); if (d) { hideItem(o); continue } } let u = this._config.showAllSuggestions || 0 === e.length, g = 0 == e.length && 0 === this._config.suggestionsThreshold; !u && e.length > 0 && this._config.searchFields.forEach(t => { let i = normalize(h.dataset[t]), s = !1; if (this._config.fuzzy) s = fuzzyMatch(i, e); else { let l = i.indexOf(e); s = this._config.startsWith ? 0 === l : l >= 0 } s && (g = !0) }); let f = g || 0 === e.length; if (u || g ? (s++, showItem(o), o.dataset.groupId && (r[o.dataset.groupId] = !0), !l && this._isItemEnabled(o) && f && (l = o), this._config.maximumItems > 0 && s > this._config.maximumItems && hideItem(o)) : hideItem(o), this._config.highlightTyped) { let m = h.textContent, p = normalize(m).indexOf(e), E = m.substring(0, p) + `<mark class="${this._config.highlightClass}">${m.substring(p, p + e.length)}</mark>` + m.substring(p + e.length, m.length); h.innerHTML = E } this._isItemEnabled(o) && (n = !0) } if (this._config.allowNew || 0 === e.length && !n || this._holderElement.classList.add(INVALID_CLASS), this._config.allowNew && this._config.regex && this.isInvalid() && this._holderElement.classList.remove(INVALID_CLASS), Array.from(i).filter(e => e.dataset.id).forEach(e => { !0 === r[e.dataset.id] && showItem(e) }), n && (this._holderElement.classList.remove(INVALID_CLASS), l && this._config.autoselectFirst && (this.removeSelection(), this._moveSelection(NEXT, l))), 0 === s) { if (this._config.notFoundMessage) { let S = this._dropElement.querySelector("." + CLASS_PREFIX + "not-found"); S.style.display = "block"; let b = this._config.notFoundMessage.replace("{{tag}}", this._searchInput.value); S.innerHTML = `<span class="dropdown-item">${b}</span>`, this._showDropdown() } else this.hideSuggestions(!1) } else this._showDropdown() } _showDropdown() { let e = this._dropElement.classList.contains(SHOW_CLASS); e || (this._dropElement.classList.add(SHOW_CLASS), attrs(this._searchInput, { "aria-expanded": "true" })), this._positionMenu(e) } _positionMenu(e = !1) { let t = this._rtl, i = this._config.fixed, s = this._config.fullWidth, l = this._searchInput.getBoundingClientRect(), n = this._holderElement.getBoundingClientRect(), r = 0, a = 0; if (i ? s ? (r = n.x, a = n.y + n.height + 2) : (r = l.x, a = l.y + l.height) : s ? (r = 0, a = n.height + 2) : (r = this._searchInput.offsetLeft, a = this._searchInput.offsetHeight + this._searchInput.offsetTop), t && !s && (r -= this._dropElement.offsetWidth - l.width), !s) { let o = Math.min(window.innerWidth, document.body.offsetWidth), h = t ? l.x + l.width - this._dropElement.offsetWidth - 1 : o - 1 - (l.x + this._dropElement.offsetWidth); h < 0 && (r = t ? r - h : r + h) } s && (this._dropElement.style.width = this._holderElement.offsetWidth + "px"), e || (this._dropElement.style.transform = "unset"), Object.assign(this._dropElement.style, { left: r + "px", top: a + "px" }); let c = this._dropElement.getBoundingClientRect(), d = window.innerHeight; if (c.y + c.height > d || this._dropElement.style.transform.includes("translateY")) { let u = s ? n.height + 4 : l.height; this._dropElement.style.transform = "translateY(calc(-100.1% - " + u + "px))" } } _getBootstrapVersion() { let e = 5, t = window.jQuery; return t && t.fn.tooltip && t.fn.tooltip.Constructor && (e = parseInt(t.fn.tooltip.Constructor.VERSION.charAt(0))), e } _isSelected(e) { let t = Array.from(this._selectElement.querySelectorAll("option")), i = t.find(t => t.textContent == e && t.getAttribute("selected")); return !!i } _isSelectable(e) { let t = Array.from(this._selectElement.querySelectorAll("option")), i = t.filter(t => t.textContent == e); if (i.length > 0) { let s = i.find(e => !e.getAttribute("selected")); if (!s) return !1 } return !0 } hasItem(e) { for (let t of this._config.items) { let i = t.items || [t]; for (let s of i) if (s[this._config.labelField] == e) return !0 } return !1 } getItem(e) { for (let t of this._config.items) { let i = t.items || [t]; for (let s of i) if (s[this._config.valueField] == e) return s } return null } _validateRegex(e) { let t = RegExp(this._config.regex.trim()); return t.test(e) } getSelection() { return this._dropElement.querySelector("a." + ACTIVE_CLASS) } removeSelection() { let e = this.getSelection(); e && e.classList.remove(...this._activeClasses()) } _activeClasses() { return [...this._config.activeClasses, ACTIVE_CLASS] } getActiveSelection() { return this.getSelection() } removeActiveSelection() { return this.removeSelection() } removeAll() { this.getSelectedValues().forEach(e => { this.removeItem(e, !0) }), this._adjustWidth() } removeLastItem(e = !1) { let t = this.getLastItem(); t && this.removeItem(t, e) } getLastItem() { let e = this._containerElement.querySelectorAll("span." + CLASS_PREFIX + "badge"); if (e.length) return e[e.length - 1].getAttribute(VALUE_ATTRIBUTE) } enable() { this._selectElement.setAttribute("disabled", ""), this.resetState() } disable() { rmAttr(this._selectElement, "disabled"), this.resetState() } isDisabled() { return this._selectElement.hasAttribute("disabled") || this._selectElement.disabled || this._selectElement.hasAttribute("readonly") } isDropdownVisible() { return this._dropElement.classList.contains(SHOW_CLASS) } isInvalid() { return this._holderElement.classList.contains(INVALID_CLASS) } isSingle() { return !this._selectElement.hasAttribute("multiple") } isMaxReached() { return this._config.max && this.getSelectedValues().length >= this._config.max } canAdd(e, t = {}) { if (!e || t.new && !this._config.allowNew || !t.new && !this.hasItem(e) || this.isDisabled()) return !1; if (!this.isSingle() && !this._config.allowSame) { if (t.new) { if (this._isSelected(e)) return !1 } else if (!this._isSelectable(e)) return !1 } return !this.isMaxReached() && ((!this._config.regex || !t.new || !!this._validateRegex(e)) && (!this._config.onCanAdd || !1 !== this._config.onCanAdd(e, t, this)) || (this._holderElement.classList.add(INVALID_CLASS), !1)) } getData() { return this._config.items } setData(e, t = !1) { Array.isArray(e) || (e = Object.entries(e).map(([e, t]) => ({ value: e, label: t }))), this._config.items != e && (this._config.items = e), t && (this._removeSelectedAttrs(), e.forEach(e => { let t = e[this._config.valueField], i = e[this._config.labelField]; if (t && (e.selected || this._config.selected.includes(t))) { let s = this.addItem(i, t, e.data); s && s.setAttribute("data-init", "true") } })), this._buildSuggestions(e), this._resetHtmlState() } _findOption(e = null, t = "", i = 0) { let s = null === e ? "" : '[value="' + CSS.escape(e) + '"]', l = this._selectElement.querySelectorAll("option" + s + t); return l[i] || null } setItem(e, t = {}) { let i = this._findOption(e, ":not([selected])"); if (i) return this.addItem(i.textContent, i.value, t); let s = this.getItem(e); if (s) { let l = s[this._config.valueField], n = s[this._config.labelField]; return this.addItem(n, l, t) } } addItem(e, t = null, i = {}) { t || (t = e), this.isSingle() && this.getSelectedValues().length && this.removeLastItem(!0); let s = this._findOption(t, ":not([selected])"); if (!s) { for (let [l, n] of ((s = ce("option")).value = t, s.textContent = e, Object.entries(i))) s.dataset[l] = n; this._selectElement.appendChild(s), this._config.onCreateItem(s, this) } return s && (i = Object.assign({ title: s.getAttribute("title") }, i, s.dataset)), s.setAttribute("selected", "selected"), s.selected = !0, this._createBadge(e, t, i), this._fireEvents && this._selectElement.dispatchEvent(new Event("change", { bubbles: !0 })), s } _resetHtmlState() { let e = this._selectElement.innerHTML; this._selectElement.innerHTML = "", this._selectElement.innerHTML = e, this._adjustWidth() } _createBadge(e, t = null, i = {}) { let s = 5 === this._getBootstrapVersion(), l = i.disabled && parseBool(i.disabled), n = this._config.allowClear && !l, r = e, a = ce("span"), o = [CLASS_PREFIX + "badge"], h = this.isSingle() && !this._config.singleBadge; if (!h) { o.push("badge"); let c = this._config.badgeStyle; i.badgeStyle && (c = i.badgeStyle), i.badgeClass && o.push(...i.badgeClass.split(" ")), this._config.baseClass ? o.push(...this._config.baseClass.split(" ")) : o = s ? [...o, "bg-" + c, "text-truncate"] : [...o, "badge-" + c], a.style.maxWidth = "100%" } l && o.push(...["disabled", "opacity-50"]); let d = h ? 0 : 2; if (a.style.margin = d + "px 6px " + d + "px 0px", a.style.marginBlock = d + "px", a.style.marginInline = "0px 6px", a.classList.add(...o), a.setAttribute(VALUE_ATTRIBUTE, t), i.title && a.setAttribute("title", i.title), n) { let u = o.includes("text-dark") || h ? "btn-close" : "btn-close btn-close-white", g = "margin-inline: 0px 6px;", f = "left"; this._config.clearEnd && (f = "right"), "right" == f && (g = "margin-inline: 6px 0px;"); let m = s ? '<button type="button" style="font-size:0.65em;' + g + '" class="' + u + '" aria-label="' + this._config.clearLabel + '"></button>' : '<button type="button" style="font-size:1em;' + g + 'text-shadow:none;color:currentColor;transform:scale(1.2);float:none" class="close" aria-label="' + this._config.clearLabel + '"><span aria-hidden="true">&times;</span></button>'; r = "left" == f ? m + r : r + m } a.innerHTML = r, this._containerElement.insertBefore(a, this._searchInput), i.title && tooltip && s && tooltip.getOrCreateInstance(a), n && a.querySelector("button").addEventListener("click", e => { e.preventDefault(), e.stopPropagation(), this.isDisabled() || this._config.confirmClear(t, this).then(() => { this.removeItem(t), document.activeElement.blur(), this._adjustWidth() }).catch(() => { }) }) } removeItem(e, t = !1) { let i = CSS.escape(e), s = this._containerElement.querySelectorAll("span[" + VALUE_ATTRIBUTE + '="' + i + '"]'); if (!s.length) return; let l = s.length - 1, n = s[l]; n && (n.dataset.bsOriginalTitle && tooltip.getOrCreateInstance(n).dispose(), n.remove()); let r = this._findOption(e, "[selected]", l); r && (rmAttr(r, "selected"), r.selected = !1, this._fireEvents && !t && this._selectElement.dispatchEvent(new Event("change", { bubbles: !0 }))), "hidden" != this._searchInput.style.visibility || this.isMaxReached() || (this._searchInput.style.visibility = "visible", this._holderElement.classList.remove(MAX_REACHED_CLASS)), t || this._config.onClearItem(e, this) } } export default Tags;