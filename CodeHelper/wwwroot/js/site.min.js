import e from "./tags.min.js"; e.init(); for (var allreadOnlyNoFormatEditors = document.querySelectorAll(".readOnlyNoFormatEditor"), i = 0; i < allreadOnlyNoFormatEditors.length; ++i)ClassicEditor.create(allreadOnlyNoFormatEditors[i], { licenseKey: "", ui: { poweredBy: { position: "inside", side: "right", label: "This is" } } }).then(e => { e.execute("removeFormat"), e.enableReadOnlyMode("readOnlyNoFormatEditor"), e.ui.view.toolbar.element.style.display = "none", e.editing.view.change(t => { let o = e.editing.view.document.getRoot(); t.removeClass("ck-editor__editable_inline", o), t.removeClass("ck-editor__editable", o), t.setStyle("max-height", "70px", o), t.setStyle("overflow", "hidden", o), t.setStyle("word-wrap", "normal", o), $("br").remove(), $("p").each(function () { "" == $.trim($(this).text()) && $(this).remove(), $(this).css("margin", "unset") }) }) }).catch(e => { console.log(e) }); for (var allReadOnlyEditors = document.querySelectorAll(".readOnlyEditor"), i = 0; i < allReadOnlyEditors.length; ++i)ClassicEditor.create(allReadOnlyEditors[i], { licenseKey: "", toolbar: [], ui: { poweredBy: { position: "inside", side: "right", label: "This is" } } }).then(e => { window.editor = e, e.enableReadOnlyMode("readOnlyEditor"), e.ui.view.toolbar.element.style.display = "none", e.editing.view.change(t => { let o = e.editing.view.document.getRoot(); t.removeClass("ck-editor__editable_inline", o), $("p").find("br").remove(), $("p").each(function () { "" == $.trim($(this).text()) && $(this).remove() }) }) }).catch(e => { console.log(e) }); for (var allEditors = document.querySelectorAll(".editor"), i = 0; i < allEditors.length; ++i)ClassicEditor.create(allEditors[i], { extraPlugins: [MyCustomUploadAdapterPlugin], licenseKey: "", ui: { poweredBy: { position: "inside", side: "right", label: "This is" } }, toolbar: { shouldNotGroupWhenFull: !0 }, codeBlock: { languages: [{ language: "plaintext", label: "Code" }] } }).catch(e => { console.log(e) }); class MyUploadAdapter { constructor(e) { this.loader = e } upload() { return this.loader.file.then(e => new Promise((t, o) => { this._initRequest(), this._initListeners(t, o, e), this._sendRequest(e) })) } abort() { this.xhr && this.xhr.abort() } _initRequest() { let e = this.xhr = new XMLHttpRequest; e.open("POST", "https://rewritecode.ru/Questions/UploadImage", !0), e.responseType = "json" } _initListeners(e, t, o) { let l = this.xhr, r = this.loader, a = `Couldn't upload file: ${o.name}.`; l.addEventListener("error", () => t(a)), l.addEventListener("abort", () => t()), l.addEventListener("load", () => { let o = l.response; if (!o || o.error) return t(o && o.error ? o.error.message : a); e({ default: o.url }) }), l.upload && l.upload.addEventListener("progress", e => { e.lengthComputable && (r.uploadTotal = e.total, r.uploaded = e.loaded) }) } _sendRequest(e) { let t = new FormData; t.append("files", e), this.xhr.send(t) } } function MyCustomUploadAdapterPlugin(e) { e.plugins.get("FileRepository").createUploadAdapter = e => new MyUploadAdapter(e) } function setCookie(e, t, o) { let l = ""; if (o) { let r = new Date; r.setTime(r.getTime() + 864e5 * o), l = "; expires=" + r.toUTCString() } document.cookie = e + "=" + (t || "") + l + "; path=/" } function getCookie(e) { let t = document.cookie.match(RegExp("(?:^|; )" + e.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, "\\$1") + "=([^;]*)")); return t ? decodeURIComponent(t[1]) : void 0 } function checkCookies() { let e = document.getElementById("cookie_note"), t = e.querySelector(".cookie_accept"); getCookie("cookies_policy") || e.classList.add("show"), t.addEventListener("click", function () { setCookie("cookies_policy", "true", 30), e.classList.remove("show") }) } checkCookies();